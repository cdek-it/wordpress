---
image: alpine:latest

stages:
  - build
  - upload
  - deploy
  #- notify

variables:
  PACKAGE_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/archive/"
  ARTIFACTORY_REPO: "https://repo.cdek.ru/artifactory/erp-cms"

build_tag:
  image: php:8.2-alpine
  stage: build
  tags:
    - docker
  only:
    - tags
  before_script:
    - apk add nodejs-current yarn
    - php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
    - php composer-setup.php
    - php -r "unlink('composer-setup.php');"
    - mv composer.phar /usr/local/bin/composer
    - export RELEASE_VERSION=$(echo "${CI_COMMIT_TAG}" | sed 's/v//')
  script:
    - sed -i "s/\(Version:\)\( *\).*/\1\2${RELEASE_VERSION}/" cdek.php
    - sed -i "s/\(Stable tag:\)\( *\).*/\1\2${RELEASE_VERSION}/" readme.txt
    - composer i -a
    - yarn set version berry
    - yarn
    - yarn build
    - rm -rf node_modules
    - mkdir /cdek
    - cp -r * /cdek
    - mv /cdek .
  artifacts:
    name: cdek-integration
    paths:
      - cdek

build_custom:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: always
    - when: manual
  image: php:8.2-alpine
  stage: build
  tags:
    - docker
  artifacts:
    name: cdek-integration
    paths:
      - cdek
  before_script:
    - apk add nodejs-current yarn
    - php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
    - php composer-setup.php
    - php -r "unlink('composer-setup.php');"
    - mv composer.phar /usr/local/bin/composer
    - export RELEASE_VERSION="${CI_COMMIT_REF_NAME}#${CI_COMMIT_SHORT_SHA}"
  script:
    - sed -i "s/\(Version:\)\( *\).*/\1\2${RELEASE_VERSION}/" cdek.php
    - sed -i "s/\(Stable tag:\)\( *\).*/\1\2${RELEASE_VERSION}/" readme.txt
    - composer i -a
    - yarn set version berry
    - yarn
    - yarn build
    - rm -rf node_modules
    - mkdir /cdek
    - cp -r * /cdek
    - mv /cdek .

upload:
  stage: upload
  tags:
    - docker
  needs:
    - job: build_tag
      artifacts: true
  only:
    - tags
  before_script:
    - apk add curl zip
    - export RELEASE_VERSION=$(echo "${CI_COMMIT_TAG}" | sed 's/v//')
    - export ARCHIVE_VERSION=$(echo "${RELEASE_VERSION}" | sed 's/\./_/g')
  script:
    - zip -r cdek.zip cdek
    #- 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file cdek.zip "${PACKAGE_URL}${RELEASE_VERSION}/wordpress_${ARCHIVE_VERSION}.zip"'
    - curl -u "${ARTIFACTORY_LOGIN}":"${ARTIFACTORY_PASS}" --upload-file cdek.zip "${ARTIFACTORY_REPO}/$CI_PROJECT_NAME/$CI_COMMIT_BRANCH/wordpress_${ARCHIVE_VERSION}.zip"

release:
  stage: deploy
  tags:
    - docker
  needs:
    - job: upload
  only:
    - tags
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  before_script:
    - export RELEASE_VERSION=$(echo "${CI_COMMIT_TAG}" | sed 's/v//')
    - export ARCHIVE_VERSION=$(echo "${RELEASE_VERSION}" | sed 's/\./_/g')
  script:
    - |
      release-cli create --name $CI_COMMIT_TAG --tag-name $CI_COMMIT_TAG \
        --assets-link "{\"name\":\"Архив\",\"filepath\":\"/archive\",\"url\":\"${ARTIFACTORY_REPO}$CI_COMMIT_BRANCH/$CI_PROJECT_NAME/wordpress_${ARCHIVE_VERSION}.zip\", \"link_type\":\"package\"}" \

#notify:
# stage: notify
#  tags:
#    - docker
#  image: curlimages/curl
#  needs:
#    - job: release
#  only:
#    - tags
#  script:
#    - |
#      curl -v -H "Content-Type: application/json" \
#        -d "{\"channel\": \"cms-support\",
#        \"username\": \"GitLab\",
#        \"text\": \"Release $CI_PROJECT_NAME $CI_COMMIT_TAG :white_check_mark:\n
#        | Component | URL | Build | User |
#        |:----------|:--------|:------|:-----|
#        | $CI_PROJECT_NAME | [GitLab](https://gitlab.cdek.ru/$CI_PROJECT_PATH/-/releases/$CI_COMMIT_TAG) | $CI_COMMIT_TAG | $CI_COMMIT_AUTHOR |
#        \"}" $WEBHOOK_URL

#deploy_staging:
#  stage: deploy
#  script:
#    - rsync -avz -e "ssh -o StrictHostKeyChecking=no" --delete ./cdek.zip ${DEPLOY_USERNAME}@${DEPLOY_NODE}:${DEPLOY_DEST_DIR}/plugins
#    - ssh ${DEPLOY_USERNAME}@${DEPLOY_NODE} "cd ${DEPLOY_DEST_DIR}/core && docker compose restart app"
#  tags:
#    - docker
#  rules:
#    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
#      when: always
#    - when: never
#  needs:
#    - job: build_custom
#      artifacts: true
#  environment:
#    name: dev2
#    url: https://wordpress-cms.dev2.cdek.ru
#  before_script:
#    - test -r ~/.ssh || mkdir -p ~/.ssh
#    - 'command -v ssh-agent >/dev/null || ( apk update && apk add openssh-client )'
#    - 'command -v rsync >/dev/null || ( apk update && apk add rsync )'
#    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
#    - chmod 600 ~/.ssh/id_rsa
#    - eval $(ssh-agent -s)
#    - ssh-add ~/.ssh/id_rsa
#    - apk add curl zip
#    - zip -r cdek.zip cdek
