---
image: alpine:latest

stages:
  - build
  - deploy

variables:
  PACKAGE_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/archive/"

build_tag:
  image: php:7.4-cli-alpine
  stage: build
  tags:
    - docker
  only:
    - tags
  before_script:
    - php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
    - php composer-setup.php
    - php -r "unlink('composer-setup.php');"
    - mv composer.phar /usr/local/bin/composer
    - export RELEASE_VERSION=$(echo "${CI_COMMIT_TAG}" | sed 's/v//')
  script:
    - sed -i "s/\(Version:\)\( *\).*/\1\2${RELEASE_VERSION}/" cdek.php
    - composer i -a
    - mkdir /cdek
    - cp -r * /cdek
    - mv /cdek .
  artifacts:
    name: cdek-integration
    paths:
      - cdek

build_custom:
  when: manual
  image: php:7.4-cli-alpine
  stage: build
  tags:
    - docker
  artifacts:
    name: cdek-integration
    paths:
      - cdek
  before_script:
    - php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
    - php composer-setup.php
    - php -r "unlink('composer-setup.php');"
    - mv composer.phar /usr/local/bin/composer
    - export RELEASE_VERSION="${CI_COMMIT_REF_NAME}#${CI_COMMIT_SHORT_SHA}"
  script:
    - sed -i "s/\(Version:\)\( *\).*/\1\2${RELEASE_VERSION}/" cdek.php
    - composer i -a
    - mkdir /cdek
    - cp -r * /cdek
    - mv /cdek .

deploy_package:
  image: curlimages/curl:latest
  stage: deploy
  needs:
    - job: build_tag
      artifacts: true
  only:
    - tags
  before_script:
    - export RELEASE_VERSION=$(echo "${CI_COMMIT_TAG}" | sed 's/v//')
  script:
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file cdek.zip "${PACKAGE_URL}${RELEASE_VERSION}/cdek.zip"'

deploy_staging:
  stage: deploy
  script:
    - rsync -avz -e "ssh -o StrictHostKeyChecking=no" --delete ./ ${DEPLOY_USERNAME}@${DEPLOY_NODE}:${DEPLOY_DEST_DIR}
  tags:
    - docker
  rules:
    - if: $CI_COMMIT_TITLE =~ /-draft$/
      when: never
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "master"
      when: always
    - when: never
  before_script:
    - echo "$CI_COMMIT_REF_SLUG"
    - test -r ~/.ssh || mkdir -p ~/.ssh
    - 'command -v ssh-agent >/dev/null || ( apk update && apk add openssh-client )'
    - 'command -v rsync >/dev/null || ( apk update && apk add rsync )'
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - eval $(ssh-agent -s)
    - ssh-add ~/.ssh/id_rsa
